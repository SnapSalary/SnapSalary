name: Build and Setup React Application in S3
on:
  push:
    branches: [ main, staging ]
  pull_request:
    types: [opened, reopened, ready_for_review, edited, synchronize]

jobs:
  build:
    env:
      AWS_REGION: us-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
    name: Build
    runs-on: ubuntu-latest
    environment: production
    permissions:
      pull-requests: write
      actions: read
      checks: read
      contents: read
      deployments: read
      issues: write
    steps:
      - name: Set Subdomain if not PR
        if: github.event_name != 'pull_request'
        run: |
          if [[ $GITHUB_REF_NAME != 'main' ]]; then
            echo "TFWORKSPACE=$GITHUB_REF_NAME" >> "$GITHUB_ENV"
          else
            echo "TFWORKSPACE=www" >> "$GITHUB_ENV"
          fi
      - name: Set Subdomain if PR
        if: github.event_name == 'pull_request'
        run: echo "TFWORKSPACE=${{ github.event.pull_request.id }}" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Output build files
        uses: actions/setup-node@v3
        with:
          node-version: 17.9.0
          cache: 'npm'
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies - client
        run: npm install
        working-directory: ./client

      - name: Build Application - client
        run: npm run build
        working-directory: ./client

      - name: Install dependencies - server
        run: npm install
        working-directory: ./server

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push to ECR
        id: build-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        working-directory: ./server

      - name: Test output
        run: |
          echo "${{ github.sha }}"

      - name: Terraform Init
        id: init
        run: terraform init -input=false
        working-directory: ./terraform

      - name: Select or Create Terraform Workspace
        id: workspace
        run: terraform workspace select ${{ env.TFWORKSPACE }} || terraform workspace new ${{ env.TFWORKSPACE }}
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            if (context.eventName !== 'pull_request') {
              return
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Your test page has been built and is available at: https://${{ env.TFWORKSPACE }}.${{ secrets.AWS_S3_BUCKET }}'
            })
